{
	"layers": [
		{
			"id": 0,
			"name": "Default",
			"keys": [
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoNum1"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoNum1"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoNum2"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoNum2"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoNum3"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoNum3"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoNum4"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoNum4"
							}
						}
					}
				],
				[],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoS1"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoS1"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoTL"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoTL"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoPL"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoPL"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoHL"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoHL"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoStar1"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoStar1"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoStar2"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoStar2"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoFR"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoFR"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoPR"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoPR"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoLR"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoLR"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoTR"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoTR"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoDR"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoDR"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "s",
								"script": "// Toggle\\nSteno\\nMode\n// Toggle the steno mode between embedded and Gemini PR when USR is pressed.\n// LED RGB is updated in Global StenoModeUpdate callback.\nif (getParameter(\"steno_mode\") != \"embedded\") {\n  console(\"set_steno_mode embedded\");\n} else {\n  console(\"set_steno_mode gemini\");\n}\nreleaseAll();"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoS2"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoS2"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoKL"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoKL"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoWL"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoWL"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoRL"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoRL"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoStar3"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoStar3"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoStar4"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoStar4"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoRR"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoRR"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoBR"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoBR"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoGR"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoGR"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoSR"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoSR"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoZR"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoZR"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoA"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoA"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoO"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoO"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoE"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoE"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "p",
								"c": "stenoU"
							}
						}
					},
					{
						"t": "r",
						"d": {
							"a": {
								"t": "r",
								"c": "stenoU"
							}
						}
					}
				],
				[
					{
						"t": "p",
						"d": {
							"a": {
								"t": "c",
								"c": "launch_bootloader"
							}
						}
					}
				]
			],
			"scripts": {},
			"user_scripts": {},
			"options": {
				"Enable individual keys in Key Layout tool": "true",
				"LED": "Steno Mode"
			},
			"sequences": {}
		}
	],
	"global": {
		"scripts": [],
		"layer": {
			"id": -1,
			"name": "Global",
			"keys": [
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				[]
			],
			"scripts": {
				"activateLayer": "setEnableButtonStates(#flag(per_layer, \"Enable individual keys in Key Layout tool\", false));\nupdateLeds();\n",
				"init": "const SCRIPT_ID_STENO_MODE_UPDATE = 9;\n\nsetScript(SCRIPT_ID_STENO_MODE_UPDATE, @updateLeds);\nupdateLeds();\n\n",
				"header": "const BLINK_TIMER_ID = 0;\n"
			},
			"user_scripts": {
				"LED Scripts": "const RED_LED_PIN = 17;\nconst GREEN_LED_PIN = 16;\n\nvar blinkLedCallback;\nvar blinkLedCount;\n\nfunc updateLeds() {\n  if (blinkLedCount == 0) {\n    #dispatch(per_layer, ledUpdate, \"LED\", updateLedNoChange);\n  }\n}\n\n#option(ledUpdate, \"LED\", \"No Change\", updateLedNoChange)\nfunc updateLedNoChange() {}\n\n#option(ledUpdate, \"LED\", \"Green Only\", updateLedGreenOnly)\nfunc updateLedGreenOnly() {\n  setGpioPin(GREEN_LED_PIN, 1);\n  setGpioPin(RED_LED_PIN, 0);\n}\n\n#option(ledUpdate, \"LED\", \"Both Off\", updateLedBothOff)\nfunc updateLedBothOff() {\n  setGpioPin(GREEN_LED_PIN, 0);\n  setGpioPin(RED_LED_PIN, 0);\n}\n\n#option(ledUpdate, \"LED\", \"Red Only\", updateLedRedOnly)\nfunc updateLedRedOnly() {\n  setGpioPin(GREEN_LED_PIN, 0);\n  setGpioPin(RED_LED_PIN, 1);\n}\n\n#option(ledUpdate, \"LED\", \"Light Red Only\", updateLedLightRedOnly)\nfunc updateLedLightRedOnly() {\n  setGpioPin(GREEN_LED_PIN, 0);\n  setGpioPinDutyCycle(RED_LED_PIN, 25);\n}\n\n#option(ledUpdate, \"LED\", \"Green & Red\", updateLedGreenAndRed)\nfunc updateLedGreenAndRed() {\n  setGpioPin(GREEN_LED_PIN, 1);\n  setGpioPin(RED_LED_PIN, 1);\n}\n\n#option(ledUpdate, \"LED\", \"Steno Mode\", setLedsForStenoMode)\nfunc setLedsForStenoMode() {\n  var stenoMode = getParameter(\"steno_mode\");\n  if (stenoMode == \"embedded\") {\n    setGpioPin(GREEN_LED_PIN, 1);\n    setGpioPin(RED_LED_PIN, 0);\n  } else {\n    setGpioPin(GREEN_LED_PIN, 1);\n    setGpioPinDutyCycle(RED_LED_PIN, 25);\n  }\n}\n\nfunc blinkLed(function, count) {\n  blinkLedCallback = function;\n  blinkLedCount = 2 * count + 1;\n  startTimer(BLINK_TIMER_ID, 500, 1, @{\n    blinkLedCount = blinkLedCount - 1;\n    if (blinkLedCount == 0) {\n      stopTimer(BLINK_TIMER_ID);\n      updateLeds();\n    } else if (blinkLedCount & 1) {\n      updateLedBothOff();\n    } else {\n      blinkLedCallback();\n    }\n  });\n}\n"
			},
			"options": {},
			"sequences": {}
		}
	}
}